import React, { useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { api } from '../globals'


export default function Home(props) {
  const [current, setCurrent] = useState({ task: '', id: '' })
  const [tasks, setTasks] = useState(props.tasks)

  const handleChange = (e) => {
    setCurrent({ task: e.target.value, id: current.id || '' })
  }


  const updateTaskStatus = task => {
    if (task.id) {
      const update = task
      update.status = !task.status
      fetch(api + '/task/' + task.id, {
        method: 'PUT', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(update)
      }).then(data => data.json()).then(res => {
        const t_index = tasks.findIndex(tsk => tsk.id === task.id)
        const currentUpdateitem = tasks[t_index]
        const updatedtasksarray = tasks
        updatedtasksarray[t_index] = currentUpdateitem
        setTasks([...updatedtasksarray])
        return console.log({ res, updatedtasksarray })
      }).catch(e => console.log({ e }))

    }
  }
  const addTask = (e) => {
    e.preventDefault()
    if (current.id) {
      //update task details
      fetch(api + '/task/' + current.id, {
        method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(current)
      }).then(data => data.json()).then(updated => {
        const t_index = tasks.findIndex(tsk => tsk.id === current.id)
        const currentUpdateitem = tasks[t_index]
        currentUpdateitem.task = current.task
        const updatedtasksarray = tasks
        updatedtasksarray[t_index] = currentUpdateitem
        setTasks([...updatedtasksarray])
        return setCurrent({ task: '', id: '' })
      }).catch(e => console.log({ e }))

    } else {
      // post task 
      const data = {
        task: current.task, status: false
      }
      fetch(api + '/task', {
        method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data)
      }).then(data => data.json()).then(task => setTasks([...tasks, task.data])).catch(err => console.log({ err }))
      setCurrent({ task: '', id: '' })

    }
  }
  const deleteTask = (id) => {
    fetch(api + '/task/' + id, {
      method: 'DELETE', headers: { 'Content-Type': 'application/json' }
    }).then(data => data.json()).then(task => setTasks(prev => prev.filter(task => task.id !== id))).catch(err => console.log({ err }))
  }
  const editTask = (id) => {
    setCurrent(tasks.find(tsk => tsk.id === id))
    // setTasks(prev => prev.filter(tsk => tsk.id !== id))
    // fetch(api + '/task/' + id, {
    //   method: 'DELETE', headers: { 'Content-Type': 'application/json' }
    // }).then(data => data.json()).then(task => setTasks(prev => prev.filter(task => task.id !== id))).catch(err => console.log({ err }))
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="#">Todox!</a>
        </h1>

        <div className={styles.taskContainer}>
          <div className={styles.taskbox}>
            <form className={styles.taskform}>
              <input className={styles.taskinput} type="text" placeholder='task' onChange={handleChange} value={current.task} required />
              <button className={styles.addbtn} onClick={addTask} type='submit'>add/update</button>
            </form>
          </div>
          <div className={styles.taskList}>
            {
              tasks.length && (
                tasks.map(task => {
                  return (
                    <div className={styles.taskitem} key={task.id}>
                      <input type="checkbox" checked={task.status} onChange={() => updateTaskStatus(task)} />
                      <p className={styles.taskitemname}>{task.task} </p>
                      <button onClick={() => editTask(task.id)}>&#9998;</button>
                      <button onClick={() => deleteTask(task.id)}>&#10006;</button>
                    </div>
                  )
                })
              ) || (
                <div className={styles.notask}>no Tasks found!</div>
              )
            }
          </div>
        </div>
      </main>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export const getServerSideProps = async () => {
  const res = await fetch(api + '/task')
  const tasks = await res.json()
  return {
    props: { tasks: tasks.data }
  }
}

